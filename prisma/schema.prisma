// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}
enum UserRole {
  ADMIN
  USER
  AGENT
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime? @map("email_verified")
  phoneNumber Int?
  role           UserRole  @default(USER)
  image          String?
  accounts Account[]

  @@map("users")
}

model Agent{
  id String @id @default(cuid())
  userId String @unique

 agentName String
 imageUrl String?
 licenseId  String?
 expectedListings Int?

  properties Listing[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Location{
  id String @id @default(cuid())

  county String
  city String

 properties Listing []
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Category{
  id String @id @default(cuid())
  name String

  properties Listing[] 
}

model Type{
  id String @id @default(cuid())
  name String
  
  bedrooms Int
  properties Listing[]
}
model Listing{
  id String @id @default(cuid())

  agentId String
  agent Agent @relation(fields: [agentId],references: [id],onDelete:Cascade)

  locationId String
  location Location @relation(fields: [locationId],references: [id],onDelete: SetNull)
  
  typeId String
  type Type @relation(fields: [typeId],references: [id],onDelete:Cascade)
  categoryId String
  category Category @relation(fields: [categoryId],references: [id],onDelete:Cascade)

  
  title String
  description String?
  thumbnail String
  amenities Amenity[]
  rentalPrice Int?
  purchasePrice Int?
  bathrooms Int
 
  area Int
 
  
}

model Amenity{
  id String @id @default(cuid())

  label String
  listingId String
  listing Listing @relation(fields: [listingId],references: [id],onDelete: Cascade)
  
}